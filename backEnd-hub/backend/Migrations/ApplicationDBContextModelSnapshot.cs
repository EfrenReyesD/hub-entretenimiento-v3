// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("backend.Models.Episode", b =>
                {
                    b.Property<int>("episode_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("episode_id"));

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("episode_number")
                        .HasColumnType("int");

                    b.Property<string>("poster_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("releaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("series_id")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("video_url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("episode_id");

                    b.HasIndex("series_id");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("backend.Models.Favorite", b =>
                {
                    b.Property<int>("favorite_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("favorite_id"));

                    b.Property<int?>("movie_id")
                        .HasColumnType("int");

                    b.Property<int?>("series_id")
                        .HasColumnType("int");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("favorite_id");

                    b.HasIndex("movie_id");

                    b.HasIndex("series_id");

                    b.HasIndex("user_id");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("backend.Models.Genre", b =>
                {
                    b.Property<int>("genre_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("genre_id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("genre_id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("backend.Models.Movie", b =>
                {
                    b.Property<int>("movie_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("movie_id"));

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("genre_id")
                        .HasColumnType("int");

                    b.Property<string>("poster_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("release_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("video_url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("movie_id");

                    b.HasIndex("genre_id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("backend.Models.Series", b =>
                {
                    b.Property<int>("series_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("series_id"));

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("genre_id")
                        .HasColumnType("int");

                    b.Property<string>("poster_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("release_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("video_url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("series_id");

                    b.HasIndex("genre_id");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Property<int>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("user_id"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("perfilUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("user_id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("backend.Models.Episode", b =>
                {
                    b.HasOne("backend.Models.Series", "Series")
                        .WithMany("Episodes")
                        .HasForeignKey("series_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Series");
                });

            modelBuilder.Entity("backend.Models.Favorite", b =>
                {
                    b.HasOne("backend.Models.Movie", "Movie")
                        .WithMany("Favorites")
                        .HasForeignKey("movie_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("backend.Models.Series", "Series")
                        .WithMany("Favorites")
                        .HasForeignKey("series_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("backend.Models.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Series");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.Movie", b =>
                {
                    b.HasOne("backend.Models.Genre", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("genre_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("backend.Models.Series", b =>
                {
                    b.HasOne("backend.Models.Genre", "Genre")
                        .WithMany("Series")
                        .HasForeignKey("genre_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("backend.Models.Genre", b =>
                {
                    b.Navigation("Movies");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("backend.Models.Movie", b =>
                {
                    b.Navigation("Favorites");
                });

            modelBuilder.Entity("backend.Models.Series", b =>
                {
                    b.Navigation("Episodes");

                    b.Navigation("Favorites");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Navigation("Favorites");
                });
#pragma warning restore 612, 618
        }
    }
}
